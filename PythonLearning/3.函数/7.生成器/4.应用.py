# -*- coding: utf-8 -*-

"""
@author: wanghc
@software: PyCharm
@file: 4.应用.py
@time: 2020/12/30 1:29
"""

# 4.1普通应用

'''
斐波那契数列
'''


def fib(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)


# 用递归的方式很简单，但是效率太低了

# 用生成器的方式
'''
递归转循环，解决递归问题 （应用一）
1.没有递归深度限制
2.递归的缺点都没有，因为他不用保存现场，这里的现场指函数。
'''


def fib2():
    a = 0
    b = 1
    while True:
        a, b = b, a + b
        yield a


f = fib2()
print(next(f))
print(next(f))
print(next(f))

# 4.2 高阶应用 协程

'''
先说说进程和线程：
线程指进程内的一个执行单元，也是进程内的可调度实体。
与进程的区别：
地址空间：
    进程内的一个执行单元
    进程至少有一个线程
    他们共享进程的地址空间，而进程有自己独立的地址空间
资源拥有：
    进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源
线程是处理器调度的基本单位，但是进程不是
二者均可并发进行。

协程也是类似这种东西，用来做调度的。
协程避免了无意义的调度，由此提高性能，但是程序员必须自己承担调度的责任。

进程和线程是内核态调度的，而协程是用户态调度的。
协程运行在一个线程之内，在用户态调度。

协程在python3的时候已经进入标准库了，asyncio
python3.5有了原生支持：async await


如何实现调度器？
就是用yield

yield有一个特点就是暂停，暂停就会让出cpu时间。
用next函数，他执行到yield就暂停了，让出cpu，这个时候就可以让用户决定干嘛了，只需要在执行next，就可以继续。
'''
