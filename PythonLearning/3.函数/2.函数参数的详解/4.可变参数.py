# -*- coding: utf-8 -*-

"""
@author: wanghc
@software: PyCharm
@file: 4.可变参数.py
@time: 2020/12/28 22:29
"""

# 4.可变参数

# 4.1 可变位置参数
'''
举例：如果现在需要定义一个求和函数，而这个函数需求经常会变成一会2个数相加，一个3个数相加，这种参数个数频繁更换的情况
'''


def sum1(x, y):
    return x + y


def sum2(x, y, z):
    return x + y + z


def sum3(*lst):
    res = 0
    for i in lst:
        res += i
    return res


'''
参数前加一个星号，表示这个参数是可变的，也就是可以接受任意多个参数，这些参数将构成一个元组。
这样的参数我们叫可变位置参数
'''


# 4.2 可变关键字参数
def connect2(**kwargs):
    print(type(kwargs))
    print(kwargs)


connect2(host='127.0.0.1', port='3306')

'''
参数前加2个星号，表示这个参数是可变的，可以接受任意多个参数，这些参数构成一个字典，此时只能通过关键字参数传参。
'''

# 4.3小结

'''
可变参数有2种形式：
1.可变位置参数
2.可变关键字参数

区别：
可变位置参数，参数名前加一个星号，参数构成一个元组，传参只能以位置参数的形式
可变关键字参数，参数名前加2个星号，参数构成一个字典，传参只能以关键字的形式

限制：
当可变位置参数和可变关键字参数一起使用时，可变位置参数必须在前面
可以和普通参数一起使用，但是传参的时候必须要匹配
'''


def fn(x, y, *args, **kwargs):
    print(x)
    print(y)
    print(args)
    print(kwargs)


fn(2, 3, '哈哈哈', k=1)

# 2
# 3
# ('哈哈哈',)
# {'k': 1}


# 另一种用法
def fn2(*args, x):
    print(args)
    print(x)


# def fn3(**args, x):
#   print(args)
#   print(x)


'''
当位置可变参数可以在普通参数之前，但是在位置可变参数之后的普通参数就变成了keyword-only参数
keyword-only参数就是必须要用关键字方法传递

因为前面是可变位置参数，也就是说所有的位置参数都会进入args列表中，那么赋值给x这个变量的方法就只有用关键字传参了

关键字可变参数不允许在普通参数之前，因为可变关键字参数就会吸收所有的关键字参数，那么后面的关键字参数就拿不到了。
'''
