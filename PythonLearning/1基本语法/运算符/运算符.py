# -*- coding: utf-8 -*-
# @Time    : 2020/1/5 23:20
# @Author  : wanghc
# @File    : 运算符.py
# @Software: PyCharm

# 1.算术运算符
# + - * /自然除 //整除 **求幂 %求膜

# 2.比较运算符
# > < = != >= <=

# 3.逻辑运算符  and 、 or 、 not
# 逻辑运算符的操作数都是bool类型或者是可以转化成bool类型的数据类型。即 两边必须是True 或 False

a = True and False
b = True or False
print(a)
print(b)


def true():
    print('true')
    return True


def false():
    print('false')
    return False


c = true() or false()  # 只要执行到第一个为true的时候，之后就不执行了。因为or是一个只要有一个为true，整个表达式结果就是true
print(c)

# 4.成员运算符
l = ['人人', '都是', 'pythonista', '']
d = '人人' in l
e = '哈哈' in l
print(d)
print(e)

# 5.身份运算符 is 、 is not
# 身份运算符作用在对象上，用于判断是否指向同一个对象，也可以用id来判断。

# x y 字符串相等，且是同一个对象，因为内存指向了同一个地址。
# python解释器运行原理：因为cpython采用的是对象引用，一旦生成一个新的字符串对象，他就会开辟一个新的内存空间存放，当 y='abc'的时候，他发现有了，就指过去了。

x = 'abc'
y = 'abc'

print(x == y)
print(x is y)
print(id(x), id(y))

f = 1234567890
g = 1234567890
print(f == g)
print(f is g)
print(id(f), id(g))

# 6.位运算符
a = 60  # 60 = 0011 1100
b = 13  # 13 = 0000 1101
c = 0

# 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
c = a & b;  # 12 = 0000 1100
print("1 - c 的值为：", c)

# 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。
c = a | b;  # 61 = 0011 1101
print("2 - c 的值为：", c)

# 按位异或运算符：当两对应的二进位相异时，结果为1
c = a ^ b;  # 49 = 0011 0001
print("3 - c 的值为：", c)

# 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1
c = ~a;  # -61 = 1100 0011
print("4 - c 的值为：", c)

# 左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
c = a << 2;  # 240 = 1111 0000
print("5 - c 的值为：", c)

# 右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
c = a >> 2;  # 15 = 0000 1111
print("6 - c 的值为：", c)

# 7.赋值运算符
# i += 3   i*=4

# 运算符优先级
'''
**	指数 (最高优先级)
~ + -	按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
* / % //	乘，除，取模和取整除
+ -	加法减法
>> <<	右移，左移运算符
&	位 'AND'
^ |	位运算符
<= < > >=	比较运算符
<> == !=	等于运算符
= %= /= //= -= += *= **=	赋值运算符
is is not	身份运算符
in not in	成员运算符
not and or	逻辑运算符
'''
